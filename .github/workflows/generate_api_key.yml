name: API Key Generator

on:
  workflow_dispatch:
    inputs:
      email:
        description: "User Email"
        required: true
        type: string
      use_case:
        description: "Use Case"
        required: true
        type: string
      duration:
        description: "Duration in days for API Key validity"
        required: false
        type: integer
        default: 7  # Default duration is 7 days if not specified

permissions:
  contents: write
  actions: write

jobs:
  generate-api-key:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Prepare Use Case for Analysis
        id: prepare_payload
        run: |
          # Escape the use case for JSON
          USE_CASE="${{ inputs.use_case }}"
          
          # Create properly formatted JSON payload using jq
          PAYLOAD=$(jq -n \
            --arg model "llama-3.3-70b-versatile" \
            --arg system_content "You are a lenient filter for API key requests. APPROVE if the request mentions ANY project type, purpose, or context. Only REJECT if it's literally just 1-3 words like 'test' or 'demo' with absolutely NO context. APPROVE examples: 'VR game development and sharing with team', 'horror game testing', 'record gameplay for YouTube', 'demo for presentation', 'PhD research', 'mobile game project', 'tutorial video', 'debugging multiplayer'. REJECT examples (ONLY these ultra-vague ones): 'test', 'demo', 'testing', 'check it out'. If someone mentions any project type (game, research, video, etc.) or any purpose at all, APPROVE it. Respond with ONLY 'APPROVED' or 'NEEDS_MORE_INFO'." \
            --arg user_content "$USE_CASE" \
            '{
              model: $model,
              messages: [
                {
                  role: "system",
                  content: $system_content
                },
                {
                  role: "user",
                  content: $user_content
                }
              ],
              temperature: 0.3,
              max_tokens: 150
            }')
          
          echo "Prepared payload for Groq API"
          echo "$PAYLOAD" | jq '.'
          
          # Save payload to file for the HTTP action
          echo "$PAYLOAD" > /tmp/groq_payload.json
          
          # Also save as multiline string for GitHub env (compact format)
          PAYLOAD_COMPACT=$(echo "$PAYLOAD" | jq -c '.')
          echo "GROQ_PAYLOAD<<EOF" >> $GITHUB_ENV
          echo "$PAYLOAD_COMPACT" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: Call Groq AI API
        id: groq_request
        uses: fjogeleit/http-request-action@v1
        with:
          url: 'https://api.groq.com/openai/v1/chat/completions'
          method: 'POST'
          bearerToken: ${{ secrets.GROQ_API_KEY }}
          customHeaders: '{"Content-Type": "application/json"}'
          data: ${{ env.GROQ_PAYLOAD }}
          timeout: 30000

      - name: Analyze Groq Response
        id: analyze_response
        run: |
          echo "Groq API Response:"
          echo '${{ steps.groq_request.outputs.response }}'
          
          RESPONSE='${{ steps.groq_request.outputs.response }}'
          HTTP_STATUS='${{ steps.groq_request.outputs.status }}'
          
          echo "HTTP Status: $HTTP_STATUS"
          
          # Check if API key is missing or invalid
          if [ "$HTTP_STATUS" = "401" ] || [ "$HTTP_STATUS" = "403" ]; then
            echo "❌ Authentication failed. Please check GROQ_API_KEY secret is set correctly."
            echo "USE_CASE_APPROVED=false" >> $GITHUB_ENV
            echo "AI_REASON=API authentication error. Manual review required." >> $GITHUB_ENV
            exit 0
          fi
          
          # Check for other HTTP errors
          if [ "$HTTP_STATUS" != "200" ]; then
            echo "⚠️ Groq API returned status $HTTP_STATUS"
            ERROR_MSG=$(echo "$RESPONSE" | jq -r '.error.message // "Unknown error"')
            echo "Error message: $ERROR_MSG"
            echo "USE_CASE_APPROVED=false" >> $GITHUB_ENV
            echo "AI_REASON=API error ($HTTP_STATUS). Manual review required." >> $GITHUB_ENV
            exit 0
          fi
          
          # Extract the AI response
          AI_DECISION=$(echo "$RESPONSE" | jq -r '.choices[0].message.content // empty')
          
          echo "AI Analysis Result:"
          echo "$AI_DECISION"
          
          # Check for API errors or empty response
          if [ -z "$AI_DECISION" ] || [ "$AI_DECISION" = "null" ]; then
            echo "⚠️ Empty or null response from Groq API."
            echo "Full response structure:"
            echo "$RESPONSE" | jq '.'
            echo "USE_CASE_APPROVED=false" >> $GITHUB_ENV
            echo "AI_REASON=Unable to analyze automatically. Manual review required." >> $GITHUB_ENV
            exit 0
          fi
          
          # Check if use case is approved
          if echo "$AI_DECISION" | grep -qi "APPROVED"; then
            echo "USE_CASE_APPROVED=true" >> $GITHUB_ENV
            echo "✅ Use case is descriptive enough. Proceeding with API key generation."
          else
            echo "USE_CASE_APPROVED=false" >> $GITHUB_ENV
            # Extract reason (everything after first line)
            REASON=$(echo "$AI_DECISION" | tail -n +2 | tr -d '\n' | sed 's/^[[:space:]]*//')
            if [ -z "$REASON" ]; then
              REASON="Please provide more details about your specific use case."
            fi
            echo "AI_REASON=$REASON" >> $GITHUB_ENV
            echo "⚠️ Use case needs more information. Will send email request."
          fi

      - name: Send Request for More Information
        if: env.USE_CASE_APPROVED == 'false'
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: smtp.privateemail.com
          server_port: 465
          username: ${{secrets.EMAIL}}
          password: ${{secrets.PASSWORD}}
          subject: "Runtime Video Recorder | Additional Information Needed"
          to: "${{ inputs.email }}"
          from: ${{secrets.FROM}}
          body: |
            Hello,
            
            Thank you for your interest in the Runtime Video Recorder API!
            
            We received your API key request:
            "${{ inputs.use_case }}"
            
            To help us better understand your needs and generate your API key, could you please provide a bit more detail? For example:
            - What type of project or application are you working on?
            - How do you plan to use the video recording feature?
            
            Just a sentence or two with more context would be great!
            
            Once we receive more details, we'll be happy to generate your API key.
            
            Best regards,
            Runtime Video Recorder Team
          secure: true
          ignore_cert: true

      - name: Stop Workflow if Use Case Needs More Info
        if: env.USE_CASE_APPROVED == 'false'
        run: |
          echo "❌ Workflow stopped. Use case requires more information."
          exit 1

      - name: Generate API Key
        if: env.USE_CASE_APPROVED == 'true'
        id: generate_key
        run: |
            # Get email and duration inputs from the workflow
            USER_EMAIL="${{ inputs.email }}"
            DURATION="${{ inputs.duration }}"

            # Generate a random API key using the email as a seed
            # Use SHA256 hash of email combined with random data for uniqueness

            SALT="salty-salt-3214"  # Optional but recommended
            API_KEY_HASH=$(echo -n "${SALT}${USER_EMAIL}" | sha256sum | head -c 16)

            # Get the expiry date (duration days from now) in day-month-year format
            EXPIRY_DATE=$(date -d "+$DURATION days" +"%d-%m-%Y")

            # Combine API key and expiry date in the format "API_KEY_26_03_2025"
            API_KEY="${API_KEY_HASH}_${EXPIRY_DATE}"

            # Debug: Check if variables are set
            echo "Generated API_KEY_HASH: $API_KEY_HASH"
            echo "Expiry Date: $EXPIRY_DATE"
            echo "Final API_KEY with Expiry: $API_KEY"
            
            echo "CURRENT_DATE=$(date +"%d-%m-%Y")" >> $GITHUB_ENV
            echo "EXPIRY_DATE=$EXPIRY_DATE" >> $GITHUB_ENV
            echo "API_KEY=$API_KEY" >> $GITHUB_ENV

            if grep -q "^${API_KEY_HASH}_" assets/rvr/rvr_trial.bin; then
              echo "❌ API key prefix already exists in rvr_trial.bin. Skipping append and commit."
              exit 1
            fi

            # Append API key to the file
            echo -e "\n$API_KEY" >> assets/rvr/rvr_trial.bin
            
            git config user.email "github-actions@github.com"
            git config user.name "GitHub Actions"
          
            git add assets/rvr/rvr_trial.bin
            git commit -m "Add new API key to rvr_trial.bin"
            git push origin ${{ github.ref }}
      
      - name: Trigger rvr_crm workflow
        if: env.USE_CASE_APPROVED == 'true'
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.RVR_CRM_TOKEN }}
          script: |
            await github.rest.actions.createWorkflowDispatch({
              owner: context.repo.owner,
              repo: 'rvr_crm',
              workflow_id: 'add_user.yml',
              ref: 'main',
              inputs: {
                user_email: '${{ inputs.email }}',
                api_key: '${{ env.API_KEY }}',
                start_date: '${{ env.CURRENT_DATE }}',
                expiry_date: '${{ env.EXPIRY_DATE }}'
              }
            });
      
      - name: Read and Modify Email Body Template
        if: env.USE_CASE_APPROVED == 'true'
        id: modify_email_body
        run: |
          # Read the Markdown template file and replace the placeholders with actual values
          EMAIL_BODY=$(cat assets/email_template.md | sed "s/{{API_KEY}}/${{ env.API_KEY }}/g" | sed "s/{{EXPIRY_DATE}}/${{ env.EXPIRY_DATE }}/g")
          # Save the modified email body to a file
          echo "$EMAIL_BODY" > email.md
          
      - name: Send mail
        if: env.USE_CASE_APPROVED == 'true'
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: smtp.privateemail.com
          server_port: 465
          username: ${{SECRETS.EMAIL}}
          password: ${{SECRETS.PASSWORD}}
          subject: "Runtime Video Recorder | Your API Key"
          to: "${{ inputs.email }}"
          bcc: ${{SECRETS.BCC}}
          from: ${{SECRETS.FROM}}
          html_body: file://email.md  # Use the modified email body file
          secure: true
          ignore_cert: true
          convert_markdown: true
