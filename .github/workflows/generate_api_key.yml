name: API Key Generator

on:
  workflow_dispatch:
    inputs:
      email:
        description: "User Email"
        required: true
        type: string
      use_case:
        description: "Use Case"
        required: true
        type: string
      duration:
        description: "Duration in days for API Key validity"
        required: false
        type: integer
        default: 7  # Default duration is 7 days if not specified

permissions:
  contents: write
  actions: write

jobs:
  generate-api-key:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Analyze Use Case with Groq AI
        id: analyze_use_case
        run: |
          # Analyze the use case using Groq API
          USE_CASE="${{ inputs.use_case }}"
          
          # Create JSON payload for Groq API
          PAYLOAD=$(cat <<EOF
          {
            "model": "llama-3.1-70b-versatile",
            "messages": [
              {
                "role": "system",
                "content": "You are an AI assistant that evaluates use case descriptions for an API key request. Determine if the use case is descriptive enough (at least 5 words, contains specific details and explains the purpose). Respond with ONLY 'APPROVED' or 'NEEDS_MORE_INFO'. If NEEDS_MORE_INFO, on the next line provide a brief reason."
              },
              {
                "role": "user",
                "content": "Evaluate this use case: $USE_CASE"
              }
            ],
            "temperature": 0.3,
            "max_tokens": 100
          }
          EOF
          )
          
          # Call Groq API
          RESPONSE=$(curl -s -X POST "https://api.groq.com/openai/v1/chat/completions" \
            -H "Authorization: Bearer ${{ secrets.GROQ_API_KEY }}" \
            -H "Content-Type: application/json" \
            -d "$PAYLOAD")
          
          # Extract the AI response
          AI_DECISION=$(echo "$RESPONSE" | jq -r '.choices[0].message.content')
          
          echo "AI Analysis Result:"
          echo "$AI_DECISION"
          
          # Check if use case is approved
          if echo "$AI_DECISION" | grep -q "APPROVED"; then
            echo "USE_CASE_APPROVED=true" >> $GITHUB_ENV
            echo "✅ Use case is descriptive enough. Proceeding with API key generation."
          else
            echo "USE_CASE_APPROVED=false" >> $GITHUB_ENV
            # Extract reason (everything after first line)
            REASON=$(echo "$AI_DECISION" | tail -n +2)
            echo "AI_REASON=$REASON" >> $GITHUB_ENV
            echo "⚠️ Use case needs more information. Will send email request."
          fi

      - name: Send Request for More Information
        if: env.USE_CASE_APPROVED == 'false'
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: smtp.privateemail.com
          server_port: 465
          username: ${{secrets.EMAIL}}
          password: ${{secrets.PASSWORD}}
          subject: "Runtime Video Recorder | Additional Information Needed"
          to: "${{ inputs.email }}"
          from: ${{secrets.FROM}}
          body: |
            Hello,
            
            Thank you for your interest in the Runtime Video Recorder API!
            
            We received your API key request, but we need more information about your use case to proceed.
            
            Your submitted use case:
            "${{ inputs.use_case }}"
            
            Please provide a more detailed description that includes:
            - The purpose of your project or application
            - How video recordings will be used?
            
            Once we receive more details, we'll be happy to generate your API key.
            
            Best regards,
            Runtime Video Recorder Team
          secure: true
          ignore_cert: true

      - name: Stop Workflow if Use Case Needs More Info
        if: env.USE_CASE_APPROVED == 'false'
        run: |
          echo "❌ Workflow stopped. Use case requires more information."
          exit 1

      - name: Generate API Key
        if: env.USE_CASE_APPROVED == 'true'
        id: generate_key
        run: |
            # Get email and duration inputs from the workflow
            USER_EMAIL="${{ inputs.email }}"
            DURATION="${{ inputs.duration }}"

            # Generate a random API key using the email as a seed
            # Use SHA256 hash of email combined with random data for uniqueness

            SALT="salty-salt-3214"  # Optional but recommended
            API_KEY_HASH=$(echo -n "${SALT}${USER_EMAIL}" | sha256sum | head -c 16)

            # Get the expiry date (duration days from now) in day-month-year format
            EXPIRY_DATE=$(date -d "+$DURATION days" +"%d-%m-%Y")

            # Combine API key and expiry date in the format "API_KEY_26_03_2025"
            API_KEY="${API_KEY_HASH}_${EXPIRY_DATE}"

            # Debug: Check if variables are set
            echo "Generated API_KEY_HASH: $API_KEY_HASH"
            echo "Expiry Date: $EXPIRY_DATE"
            echo "Final API_KEY with Expiry: $API_KEY"
            
            echo "CURRENT_DATE=$(date +"%d-%m-%Y")" >> $GITHUB_ENV
            echo "EXPIRY_DATE=$EXPIRY_DATE" >> $GITHUB_ENV
            echo "API_KEY=$API_KEY" >> $GITHUB_ENV

            if grep -q "^${API_KEY_HASH}_" assets/rvr/rvr_trial.bin; then
              echo "❌ API key prefix already exists in rvr_trial.bin. Skipping append and commit."
              exit 1
            fi

            # Append API key to the file
            echo -e "\n$API_KEY" >> assets/rvr/rvr_trial.bin
            
            git config user.email "github-actions@github.com"
            git config user.name "GitHub Actions"
          
            git add assets/rvr/rvr_trial.bin
            git commit -m "Add new API key to rvr_trial.bin"
            git push origin ${{ github.ref }}
      
      - name: Trigger rvr_crm workflow
        if: env.USE_CASE_APPROVED == 'true'
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.RVR_CRM_TOKEN }}
          script: |
            await github.rest.actions.createWorkflowDispatch({
              owner: context.repo.owner,
              repo: 'rvr_crm',
              workflow_id: 'add_user.yml',
              ref: 'main',
              inputs: {
                user_email: '${{ inputs.email }}',
                api_key: '${{ env.API_KEY }}',
                start_date: '${{ env.CURRENT_DATE }}',
                expiry_date: '${{ env.EXPIRY_DATE }}'
              }
            });
      
      - name: Read and Modify Email Body Template
        if: env.USE_CASE_APPROVED == 'true'
        id: modify_email_body
        run: |
          # Read the Markdown template file and replace the placeholders with actual values
          EMAIL_BODY=$(cat assets/email_template.md | sed "s/{{API_KEY}}/${{ env.API_KEY }}/g" | sed "s/{{EXPIRY_DATE}}/${{ env.EXPIRY_DATE }}/g")
          # Save the modified email body to a file
          echo "$EMAIL_BODY" > email.md
          
      - name: Send mail
        if: env.USE_CASE_APPROVED == 'true'
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: smtp.privateemail.com
          server_port: 465
          username: ${{SECRETS.EMAIL}}
          password: ${{SECRETS.PASSWORD}}
          subject: "Runtime Video Recorder | Your API Key"
          to: "${{ inputs.email }}"
          bcc: ${{SECRETS.BCC}}
          from: ${{SECRETS.FROM}}
          html_body: file://email.md  # Use the modified email body file
          secure: true
          ignore_cert: true
          convert_markdown: true
